{
  "name": "ffi",
  "version": "1.0.1",
  "authors": [
    "Rick Branson",
    "Nathan Rajlich <nathan@tootallnate.net> (http://tootallnate.net)"
  ],
  "description": "A foreign function interface (FFI) for Node.js",
  "homepage": "http://github.com/rbranson/node-ffi",
  "engines": {
    "node": ">=0.6.0"
  },
  "main": "./lib/ffi",
  "dependencies": {
    "bindings": "*",
    "debug": "*",
    "ref": "*",
    "ref-struct": "*"
  },
  "devDependencies": {
    "expect.js": "*",
    "mocha": "*"
  },
  "scripts": {
    "test": "cd test && node-gyp rebuild && mocha -gc --reporter spec *.js",
    "install": "node-gyp rebuild"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/rbranson/node-ffi.git"
  },
  "bugs": {
    "url": "http://github.com/rbranson/node-ffi/issues"
  },
  "gypfile": true,
  "readme": "node-ffi\n========\n### Node.js Foreign Function Interface [![Build Status](https://secure.travis-ci.org/rbranson/node-ffi.png)](http://travis-ci.org/rbranson/node-ffi)\n\n`node-ffi` is a Node.js addon for loading and calling dynamic libraries using pure JavaScript. It can be used to create bindings to native libraries without writing any C++ code.\n\nIt also simplifies the augmentation of node.js with C code as it takes care of handling the translation of types across JavaScript and C, which can add reams of boilerplate code to your otherwise simple C. See the `example/factorial` for an example of this use case.\n\n**WARNING**: node-ffi assumes you know what you're doing. You can pretty easily create situations where you will segfault the interpreter and unless you've got C debugger skills, you probably won't know what's going on.\n\n\nExample\n-------\n\n``` js\nvar ffi = require('ffi');\n\nvar libm = ffi.Library('libm', {\n  'ceil': [ 'double', [ 'double' ] ]\n});\nlibm.ceil(1.5); // 2\n\n// You can also access just functions in the current process by passing a null\nvar current = ffi.Library(null, {\n  'atoi': [ 'int', [ 'string' ] ]\n});\ncurrent.atoi('1234'); // 1234\n```\n\n\nRequirements\n------------\n\n * Linux, OS X, Windows, or Solaris.\n * `libffi` comes bundled with node-ffi, it does not need to be installed on your system.\n * The current version is tested to run on node 0.6.x and 0.7.x.\n\n\nInstallation\n------------\n\n``` bash\n$ npm install ffi\n```\n\nSource Install / Manual Compilation\n-----------------------------------\n\nTo compile from source it's easiest to use\n[`node-gyp`](https://github.com/TooTallNate/node-gyp):\n\n``` bash\n$ npm install -g node-gyp\n```\n\nNow you can compile `node-ffi`:\n\n``` bash\n$ git clone git://github.com/rbranson/node-ffi.git\n$ cd node-ffi\n$ node-gyp configure build\n```\n\n\nTypes\n-----\n\nThe types that you specify in function declarations correspond to ref's types\nsystem. So [see that](https://github.com/TooTallNate/ref#built-in-types) for a reference if you are unfamiliar.\n\n\nV8 and 64-bit Types\n-------------------\n\nInternally, V8 stores integers that will fit into a 32-bit space in a 32-bit integer, and those that fall outside of this get put into double-precision floating point numbers. This is problematic because FP numbers are imprecise. To get around this, the methods in node-ffi that deal with 64-bit integers return strings and can accept strings as parameters.\n\nCall Overhead\n-------------\n\nThere is non-trivial overhead associated with FFI calls. Comparing a hard-coded binding version of `strtoul()` to an FFI version of `strtoul()` shows that the native hard-coded binding is 5x faster. So don't just use the C version of a function just because it's faster. There's a significant cost in FFI calls, so make them worth it.\n\nLicense\n-------\n\nMIT License. See the `LICENSE` file.\n",
  "_id": "ffi@1.0.1",
  "dist": {
    "shasum": "fe9760c519f60a05ac3b6008cfac2df4ad6d4f54"
  },
  "_from": "ffi@=1.0.1"
}
